# Binary search(iterative)

def binary_search(sorted_iterable, target):
    low_index = 0
    high_index = len(sorted_iterable) - 1
    while low_index <= high_index:
        mid_index = (low_index + high_index) // 2
        searched_item = sorted_iterable[mid_index]
        if searched_item == target:
            return mid_index
        elif searched_item > target:
            high_index = mid_index - 1
        else:
            low_index = mid_index + 1
    return None

assert binary_search([1, 3, 5, 7, 9, 11, 13, 15], 7) == 3
assert binary_search([-1, -3, 5, 7, 9, 11, 13, 15], 9) == 4
assert binary_search([-1, -3, 5, 7, 9, 11, 13, 15], 15) == 7
assert binary_search([-1, -3, 5, 7, 9, 11, 13, 15], 19) is None

# Binary search(recursive)

def binary_search(sorted_iterable, target, low_index, high_index):
    if low_index <= high_index:
        mid_index = (low_index + high_index) // 2
        if sorted_iterable[mid_index] == target:
            return mid_index
        elif sorted_iterable[mid_index] < target:
            return binary_search(sorted_iterable, target, mid_index + 1, high_index)
        else:
            return binary_search(sorted_iterable, target, low_index, mid_index - 1)
    return None

assert binary_search([1, 3, 5, 7, 9, 11, 13, 15], 7, 0, len([1, 3, 5, 7, 9, 11, 13, 15]) - 1) == 3
assert binary_search([-1, -3, 5, 7, 9, 11, 13, 15], 9, 0, len([-1, -3, 5, 7, 9, 11, 13, 15]) - 1) == 4
assert binary_search([-1, -3, 5, 7, 9, 11, 13, 15], 15, 0, len([-1, -3, 5, 7, 9, 11, 13, 15]) - 1) == 7
assert binary_search([-1, -3, 5, 7, 9, 11, 13, 15], 19, 0, len([-1, -3, 5, 7, 9, 11, 13, 15]) - 1) is None
assert binary_search([], 19, 0, len([]) - 1) is None


# Insertion sort
def insertion_sort(iterable):
    for j in range(1, len(iterable)):
        key = iterable[j]
        i = j - 1
        while i >= 0 and iterable[i] > key:
            iterable[i + 1] = iterable[i]
            i -= 1
        iterable[i + 1] = key
    return iterable


assert insertion_sort([3, -2, 1, -4, 0, 5]) == [-4, -2, 0, 1, 3, 5]
assert insertion_sort([5, 2, 9, 1, 5, 6]) == [1, 2, 5, 5, 6, 9]
